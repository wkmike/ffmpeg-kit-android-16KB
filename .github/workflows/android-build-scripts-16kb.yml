name: android build scripts

on:
  workflow_dispatch: # Allows manual triggering, which will create a release
  push:
    branches:
      - development
      - main
    paths:
      - '.github/workflows/android-build-scripts.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'
  pull_request:
    branches:
      - development
      - main
    paths:
      - '.github/workflows/android-build-scripts.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'

jobs:
  build-main-on-linux:
    name: android main on linux (ndk-r23-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake autopoint autotools-dev bison build-essential cmake g++ gcc gettext git gperf groff libtool m4 meson ninja-build pkg-config texinfo yasm nasm unzip wget xz-utils zlib1g-dev libssl-dev python3 python3-pip python3-setuptools libmp3lame-dev libogg-dev libvorbis-dev libpng-dev libxml2-dev libfreetype6-dev libfribidi-dev libexpat1-dev libglib2.0-dev libgmp-dev libgnutls28-dev libtool-bin libncurses5-dev libncursesw5-dev gcc-multilib g++-multilib libbz2-dev liblzma-dev libsqlite3-dev libreadline-dev libffi-dev libtinfo5 libass-dev libwebp-dev libx264-dev libx265-dev libvpx-dev libtheora-dev libopus-dev libsoxr-dev libtwolame-dev libshine-dev libsnappy-dev libilbc-dev libvidstab-dev libopenjp2-7-dev libfontconfig1-dev libzimg-dev libopenal-dev libpulse-dev libva-dev libx11-dev libxext-dev libxfixes-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev libdrm-dev libva-x11-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev libchromaprint-dev libsamplerate0-dev libtesseract-dev libopenblas-dev liblapack-dev libopencv-dev libjpeg-dev libtiff-dev libgif-dev liblz4-dev libuuid1 uuid-dev autogen gtk-doc-tools gnulib
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1"
      - name: set up android ndk r23 (16k support)
        run: |
          wget https://ci.android.com/builds/submitted/12186248/linux/latest/android-ndk-12186248-linux-x86_64.zip -O ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/android-ndk-r23c" >> $GITHUB_ENV
      - name: run the build script
        run: ./android.sh -d --full --enable-gpl --enable-lame --disable-arm-v7a
      - name: prepare and upload main aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          mv "$AAR_PATH" "ffmpeg-kit-main-ndk-r23-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-main-aar
          path: ffmpeg-kit-main-ndk-r23-16k.aar
          if-no-files-found: error
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: '[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log'

  build-lts-on-linux:
    name: android lts on linux (ndk-r23-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake autopoint autotools-dev bison build-essential cmake g++ gcc gettext git gperf groff libtool m4 meson ninja-build pkg-config texinfo yasm nasm unzip wget xz-utils zlib1g-dev libssl-dev python3 python3-pip python3-setuptools libmp3lame-dev libogg-dev libvorbis-dev libpng-dev libxml2-dev libfreetype6-dev libfribidi-dev libexpat1-dev libglib2.0-dev libgmp-dev libgnutls28-dev libtool-bin libncurses5-dev libncursesw5-dev gcc-multilib g++-multilib libbz2-dev liblzma-dev libsqlite3-dev libreadline-dev libffi-dev libtinfo5 libass-dev libwebp-dev libx264-dev libx265-dev libvpx-dev libtheora-dev libopus-dev libsoxr-dev libtwolame-dev libshine-dev libsnappy-dev libilbc-dev libvidstab-dev libopenjp2-7-dev libfontconfig1-dev libzimg-dev libopenal-dev libpulse-dev libva-dev libx11-dev libxext-dev libxfixes-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev libdrm-dev libva-x11-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev libchromaprint-dev libsamplerate0-dev libtesseract-dev libopenblas-dev liblapack-dev libopencv-dev libjpeg-dev libtiff-dev libgif-dev liblz4-dev libuuid1 uuid-dev autogen gtk-doc-tools gnulib
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1"
      - name: set up android ndk r23 (16k support)
        run: |
          wget https://ci.android.com/builds/submitted/12186248/linux/latest/android-ndk-12186248-linux-x86_64.zip -O ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/android-ndk-r23c" >> $GITHUB_ENV
      - name: run the build script
        run: ./android.sh -d --lts --full --enable-gpl --enable-lame --disable-arm-v7a
      - name: prepare and upload lts aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          mv "$AAR_PATH" "ffmpeg-kit-lts-ndk-r23-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-lts-aar
          path: ffmpeg-kit-lts-ndk-r23-16k.aar
          if-no-files-found: error
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: '[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log'

  create-release:
    name: create github release
    # This job will only start if BOTH of the jobs above complete successfully.
    needs: [build-main-on-linux, build-lts-on-linux]
    runs-on: ubuntu-latest
    # This job will only run if the workflow is started manually.
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: set release tag
        id: set_tag
        run: echo "TAG_NAME=ffmpeg-kit-android-$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
      - name: download all aar artifacts
        uses: actions/download-artifact@v4
        with:
          path: aar-artifacts
      - name: list downloaded files for debug
        run: ls -R aar-artifacts
      - name: create github release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Android AARs (NDK r23-16k) - ${{ env.TAG_NAME }}"
          body: "Automated release of Android AAR files from Linux builds using NDK r23 with 16kB page size support."
          prerelease: true
          files: aar-artifacts/*/*.aar
